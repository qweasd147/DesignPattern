Template Method Pattern - 템플릿 메서드 패턴

	* 상위 클래스에서 처리의 흐름을 제어하며, 하위클래스에서 처리의 내용을 구체화한다.
	* 여러 클래스에 공통되는 사항은 상위 추상 클래스에서 구현하고, 각각의 상세부분은 하위 클래스에서 구현한다.
	* 코드의 중복을 줄이고, Refactoring에 유리한 패턴으로 상속을 통한 확장 개발 방법으로써
	* 전략 패턴(Strategy Pattern)과 함께 가장 많이 사용되는 패턴중에 하나이다.


[고려사항]
	* 멤버 함수들의 접근 범위 지정에 대한 명확화가 필요
	* 가상함수, 일반함수로 선언에 대한 결정이 필요
	* 재정의 함수(virtual)의 수를 줄이는 것이 필요(virtual table 확장에 따른 perfomance 문제점 발생)
	
------------------------------------------------------------------------------------
 목표 : 템플릿 패턴을 사용해서 신작 게임 접속을 구현
 		- 알고리즘을 여러 단계로 나눔
 		- 나눠진 알고리즘의 단계를 메소드로 선언한다.
 		- 알고리즘을 수행할 템플릿 메소드를 만든다.
 		- 하위 클래스에서 나눠진 메소드들을 구현한다.
 		
 //알고리즘을 수행할 템플릿
 requestConnection(String str):String
 
 
 고려 사항
 1. 유저가 게임 접속 시 다음을 고려
	(1)보안 과정 : 보안 관련 부분을 처리
 		-doSecurity(String String):String
	(2)인증 과정 : user name과 password가 일치하는지 확인
 		-authentication(String id, String password):boolean
	(3)권한 과정 : 접속자가 유료 회원인지 무료회원인지 게임 마스터 인지 확인
 		-authorization(String userName):int
	(4)접속과정 : 접속자에게 커넥션 정보를 넘겨줍니다.
 		-connection(String info):String
